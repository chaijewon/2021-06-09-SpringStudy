<?xml version="1.0" encoding="UTF-8"?>
<!-- mapper를 모아서 한번에 처리 ORM -->
<!-- 
      1. Web (중심 : 데이터베이스)
         ==> 분산(여러명이 동시에 개발=>MVC) => Back-End,Front-End
         ==> SW Line : 1500줄 ==> 250줄
         ==> 결정 (Back-End,Front-End)
         ==> Back-End  : 오라클 / 스프링 / AI / Jsoup
         ==> Front-End  : JavaScript(NodeJS,ReactJS,VueJS,Ajax)
         ==> 퍼블리셔 (웹디자인) : HTML/CSS
         ==> IT기획 , SW 설계 => 아키텍쳐 
         ======================================================
             SI(다방면:개발):구디 / SM(유지보수):금융권 / 솔루션(자체개발) / 
                        프레임워크(위탁개발)  
      2. Spring (일반 Spring / 전자정부 Spring)
                 스프링은 클래스관리(생성 = 소멸) => 스프링에 위탁(클래스등록)
         <bean> : 클래스 한개씩 등록 
         <context:component-scan> : 패키지단위로 등록 요청 
         ========================
            => class="패키지명.클래스명"
                     객체생성 (Class.forName("패키지명.클래스명"))
                     |
                      클래스가 가지고 있는 멤버변수에 대한 초기화 (DI)
                  DI => 생성자,setXxx()
                  *** 멤버변수 (일반변수 , 배열 , 클래스 객체 => 변수)
                                  예) class A
                      {
                          private String name;
                          private int age;
                          private B b;
                          private String[] data;
                      }
                     |
                       필요한 메소드를 호출 할 수 있다 (요청)
                                   메소드 DI
                      = 생성시(처음에) => init-method
                            => XML이 아니라 자바로 코딩 
                                                          메소드 위에 @PostConstructor 
                        1. 데이터베이스 드라이버 등록 
                        2. 쓰레드 동작 (실시간으로 날씨,뉴스)
                        3. 데이터분석 (트위터)
                        4. 자동 로그인
                      = 종료시(종료시에) => 데이터베이스 닫기,서버닫기,쓰레드종료
                        destory-method => @PreDestory
            ================================== 대기 (스프링)
                           프로그래머가 필요시마다 객체를 요청 (프로그램에서 사용)
                           getBean() => 직접 요청 (객체주소)
                          ***스프링에 저장된 데이터형이 틀리다 
                          class A extends Object
                          {
                          }
                          class B extends Object
                          {
                          }
                          class C extends Object
                          {
                          }
                          ========== 클래스전체 통합 (Object)=>형변환
                           @Autowired => 스프링을 통해서 자동으로 객체주소 얻기
            =============================================
                                         생성 모든 객체를 소멸 (스프링) 
                                         메모리 누수 방지 (싱글턴)   ==> new 
            class A (extends Object) => 자바의 모든 클래스 Object상속
            {
               public void display(){}
            }
            
            Object obj=new A();
            A a=(A)obj;
              => 단점 => obj.display() => 오류 
              (Object가 가지고 있는 메소드중에 오버라이딩된 메소드만 호출이 가능)
            A a=new Object() ==> 오류
 -->
 <!DOCTYPE configuration
 PUBLIC "-//mybatis.org//DTD Config 3.0//EN"
 "http://mybatis.org/dtd/mybatis-3-config.dtd">
 <configuration>
   <typeAliases>
    <typeAlias type="com.sist.dao.HotelVO" alias="HotelVO"/>
   </typeAliases>
   <mappers>
     <mapper resource="com/sist/dao/hotel-mapper.xml"/>
   </mappers>
 </configuration>
 
 
 
 
 